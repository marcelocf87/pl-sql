SELECT * FROM v$version;

/*
DBMS_OUTPUT Ã© um pacote integrado fornecido pela Oracle para exibir informaÃ§Ãµs, debugar e capturar saÃ­das dentro de um programa
NecessÃ¡rio habilitar com o comando SET SERVEROUTPUT ON;
*/

SET SERVEROUTPUT ON

--testando o pacote DBMS
DECLARE
    mensagem VARCHAR(5) := 'PL-SQL';
BEGIN
    dbms_output.put_line(mensagem);
EXCEPTION
    WHEN OTHERS THEN
        dbms_output.put_line('Erro encontrado: ' || sqlerrm);
END;
/

--variÃ¡veis e tipos de Dados
DECLARE
    v_numero NUMBER := 100;
    v_nome VARCHAR(50) := 'PL-SQL';
    v_data DATE := SYSDATE;
    v_valido BOOLEAN := TRUE;
BEGIN
    DBMS_OUTPUT.PUT_LINE('NÃºmero: ' || v_numero);
    DBMS_OUTPUT.PUT_LINE('Nome: ' || v_nome);
    DBMS_OUTPUT.PUT_LINE('Data: ' || TO_CHAR(V_DATA, 'DD/MM/YYYY'));    
END;
/

--Estruturas de controle - comandos condicionais IF/ELSE e CASE/WHEN e laÃ§os de repetiÃ§Ã£o LOOP, WHILE e FOR para controle do fluxo.
--condicionais if/else
declare
    v_idade NUMBER := 20;
begin
    if v_idade >= 18 then
        dbms_output.put_line('Maior de idade');
    else
        dbms_output.put_line('Ã‰ menor de idade');
    end if;    
end;
/


--case
DECLARE
    v_status CHAR(1) := 'A';
BEGIN
    CASE V_STATUS
        WHEN 'A' THEN DBMS_OUTPUT.PUT_LINE('Ativo');
        WHEN 'I' THEN DBMS_OUTPUT.PUT_LINE('Inativo');
        ELSE DBMS_OUTPUT.PUT_LINE('Desconhecido');
    END CASE;
END;    
/

--laÃ§os de repetiÃ§Ã£o (loop, while, for)
declare
    v_contador NUMBER := 1;
BEGIN
    LOOP
        DBMS_OUTPUT.PUT_LINE('Contador: ' || v_contador);
        v_contador := v_contador + 1;
        EXIT WHEN v_contador > 5;
    end loop;    
END;
/


DECLARE
    v_numero NUMBER := 1;
BEGIN
    WHILE v_numero <= 5 LOOP
        dbms_output.put_line('NÃºmero: ' || v_numero);
        v_numero := v_numero + 1;
    END LOOP;
END;
/


BEGIN
    FOR i IN 1..5 LOOP
        dbms_output.put_line('IteraÃ§Ã£o ' || i);
    END LOOP;
END;
/

--Tratamento de ExceÃ§Ãµes - captura erros com EXCEPTION, usa WHEN OTHERS THEN SQLERRM para mensagens e RAISE para exceÃ§Ãµes personalizadas.
DECLARE
    v_resultado NUMBER;
BEGIN
    v_resultado := 10/0;
EXCEPTION
    WHEN ZERO_DIVIDE THEN--ZERO_DIVIDE Ã© uma exceÃ§Ã£o prÃ©-definida no PL/SQL
        DBMS_OUTPUT.PUT_LINE('ERRO: Tentativa de dividir por zero');
END;
/
/*
Algumas exceÃ§Ãµes prÃ©-definidas:
NO_DATA_FOUND	Nenhuma linha Ã© retornada em uma consulta SELECT INTO
TOO_MANY_ROWS	SELECT INTO retorna mais de uma linha
ZERO_DIVIDE	Ocorre uma divisÃ£o por zero
VALUE_ERROR	Erro de conversÃ£o ou nÃºmero fora do intervalo permitido
INVALID_NUMBER	ConversÃ£o de string para nÃºmero falha
*/

DECLARE
    v_valor VARCHAR2(50);
BEGIN
    SELECT valor INTO v_valor FROM lancamentos WHERE codigo = 1;
    DBMS_OUTPUT.PUT_LINE('Valor encontrado');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Valor nÃ£o encontrado');
END;
/
select * from lancamentos where codigo = 1;

--Usando WHEN OTHERS e SQLCODE / SQLERRM
--Para capturar qualquer erro e exibir sua mensagem:
DECLARE
    v_num NUMBER := 10;
BEGIN
    v_num := v_num / 0; -- Gera erro
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Erro: ' || SQLCODE || ' - ' || SQLERRM);
END;
/
--SQLCODE retorna o cÃ³digo do erro.
--SQLERRM retorna a mensagem associada.

--RAISE - lanÃ§ar uma uma exceÃ§Ã£o personalizada
DECLARE
    erro_personalizado EXCEPTION;
    PRAGMA EXCEPTION_INIT(erro_personalizado, -20001);--Esse cÃ³digo de erro pode ser qualquer nÃºmero entre -20000 e -20999, reservado para erros definidos pelo usuÃ¡rio.
BEGIN
    RAISE erro_personalizado;--O comando RAISE forÃ§a a execuÃ§Ã£o a interromper e lanÃ§a a exceÃ§Ã£o erro_personalizado, ativando o bloco EXCEPTION
EXCEPTION
    WHEN erro_personalizado THEN
        DBMS_OUTPUT.PUT_LINE('Erro personalizado acionado');
END;        
/


BEGIN
    RAISE_APPLICATION_ERROR(-20001, 'Ocorreu um erro especÃ­fico nesta operaÃ§Ã£o!');
END;
/

DECLARE
    erro_personalizado EXCEPTION;
    PRAGMA EXCEPTION_INIT(erro_personalizado, -20001);
BEGIN
    RAISE_APPLICATION_ERROR(-20001, 'Este Ã© um erro personalizado!');
EXCEPTION
    WHEN erro_personalizado THEN
        DBMS_OUTPUT.PUT_LINE('Erro capturado: Este Ã© um erro personalizado!');
END;
/
--RAISE apenas lanÃ§a a exceÃ§Ã£o
--RAISE_APPLICATION_ERROR permite adicionar uma mensagem personalizada, tornando os erros mais informativos
--Ambos lanÃ§am exceÃ§Ãµes, mas RAISE_APPLICATION_ERROR permite incluir mensagens explicativas, enquanto RAISE precisa de uma declaraÃ§Ã£o separada.
--Se precisar personalizar o erro e gerar logs, RAISE_APPLICATION_ERROR Ã© mais Ãºtil.
--Se quiser tratar exceÃ§Ãµes dentro do cÃ³digo sem gerar mensagens externas, RAISE pode ser suficiente.


--manipulaÃ§Ã£o de cursores (sÃ£o usados para manipular dados linhas por linha de forma sequencial)
--exemplo de cursor explÃ­cito
DECLARE
   CURSOR c_lancamentos IS--declaraÃ§Ã£o do cursor
       SELECT historico, valor FROM lancamentos;
   v_historico lancamentos.historico%TYPE;--%type garante que a variÃ¡vel tenha o mesmo tipo de dado das colunas da tabela
   v_valor lancamentos.valor%TYPE;
BEGIN
   OPEN c_lancamentos;--abre o cursor
   LOOP--para percorrer os registros
       FETCH c_lancamentos INTO v_historico, v_valor;--fetch busca o prÃ³ximo registro do cursor e coloca os valores nas variÃ¡veis associadas.
       EXIT WHEN c_lancamentos%NOTFOUND;--encerra o loop se nÃ£o forem encontrados mais registros
       DBMS_OUTPUT.PUT_LINE('HistÃ³rico do lanÃ§amento ' || v_historico || ' = R$ ' || v_valor);--imprime os dados concatenando os valores com a string
   END LOOP;--finaliza o loop
   CLOSE c_lancamentos;--fecha o cursor liberando os dados extraÃ­dos
END;
/

--cursor implÃ­cito (Ã© declarado sem a necessidade de um open e close explÃ­citos)
DECLARE
    v_total NUMBER;
BEGIN
    --a oracle cria automaticamente um cursor implÃ­cito para essa consulta
    SELECT
        COUNT(*)
    INTO v_total
    FROM
        lancamentos
    WHERE
        bandeira_id = 3;
    dbms_output.put_line('Total de lanÃ§amentos: ' || v_total);
END;
/

   
--Usando FETCH Manualmente (Sem loop direto)
--VocÃª pode abrir o cursor, buscar um Ãºnico registro e fechar manualmente.
DECLARE
    CURSOR c_exemplo IS SELECT nome FROM clientes;
    v_nome clientes.nome%TYPE;
BEGIN
    OPEN c_exemplo;
    FETCH c_exemplo INTO v_nome;  -- Busca apenas um registro
    IF c_exemplo%FOUND THEN
        DBMS_OUTPUT.PUT_LINE(v_nome);
    END IF;
    CLOSE c_exemplo;
END;
/

--Usando FOR CURSOR (Mais Simples e Limpo)
--O Oracle gerencia o OPEN, FETCH e CLOSE automaticamente.
BEGIN
    FOR r IN (SELECT nome FROM clientes) LOOP
        DBMS_OUTPUT.PUT_LINE(r.nome);
    END LOOP;
END;
/

--Loops sÃ£o muito usados, mas FETCH pode ser feito manualmente.
--O FOR CURSOR Ã© mais limpo e evita OPEN e CLOSE manuais.
--Se precisar de apenas um registro, FETCH sem loop pode ser suficiente.



Objetos que Podemos Programar no PL/SQL
ðŸ”¹ 1. Blocos AnÃ´nimos
CÃ³digo PL/SQL sem nome, executado diretamente no SQL Developer ou no banco, sem ser armazenado.

ðŸ”¹ 2. Procedures (Procedimentos)
Blocos armazenados no banco que executam operaÃ§Ãµes sem retornar valores diretamente.

ðŸ”¹ 3. Functions (FunÃ§Ãµes)
Semelhantes a procedures, mas retornam um valor especÃ­fico ao serem chamadas.

ðŸ”¹ 4. Packages (Pacotes)
Conjunto de procedures, functions e variÃ¡veis agrupadas em um Ãºnico mÃ³dulo para melhor organizaÃ§Ã£o.

ðŸ”¹ 5. Triggers (Gatilhos)
CÃ³digo que executa automaticamente em resposta a eventos (INSERT, UPDATE, DELETE) em uma tabela.

ðŸ”¹ 6. Cursors (Cursores)
Estruturas que manipulam conjuntos de dados linha a linha dentro de um bloco PL/SQL.

ðŸ”¹ 7. Views (VisÃµes)
Consultas prÃ©-definidas armazenadas no banco para facilitar a reutilizaÃ§Ã£o e a seguranÃ§a dos dados.

ðŸ”¹ 8. Sequences (SequÃªncias)
Objetos que geram nÃºmeros automaticamente, geralmente usados para chaves primÃ¡rias.
